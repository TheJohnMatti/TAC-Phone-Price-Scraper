# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from playwright.sync_api import sync_playwright
from selectolax.parser import HTMLParser
import tac_mapper
import amazon_scraper
import ebay_scraper


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Tac Phone Price Web Scraper")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(270, 10, 81, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.pressed.connect(self.process_tac_code_helper)
        self.textInput = QtWidgets.QLineEdit(MainWindow)
        self.textInput.setGeometry(QtCore.QRect(10, 10, 260, 31))
        self.textInput.setPlaceholderText("Enter TAC code...")
        self.textInput.setValidator(QtGui.QIntValidator())

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.initialize_playwright()
        app.aboutToQuit.connect(self.close_playwright)
        self.products = []


    def initialize_playwright(self):
        self.pw = sync_playwright().start()
        self.browser = self.pw.chromium.launch()
        self.page = self.browser.new_page()

    def close_playwright(self):
        self.page.close()
        self.browser.close()
        self.pw.stop()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Enter"))
        self.pushButton.setShortcut(_translate("MainWindow", "Return"))

    def process_tac_code_helper(self):
        # set loading text
        res = tac_mapper.process_tac_code(self.textInput.text())
        match res:
            case "-1":
                dlg = CustomDialog("The TAC entered must be 8 digits long!")
                dlg.exec_()
            case "-2":
                dlg = CustomDialog("The TAC entered does not correspond to a known phone model!")
                dlg.exec_()
            case _:
                self.scraper_helper(res)


    def scraper_helper(self, doc):
        query = self.produce_search_query(doc)
        # ...
        self.products += amazon_scraper.run(query, self.page)
        # ...
        self.products += ebay_scraper.run(query, self.page)

    def produce_search_query(self, doc):
        query = ""
        name: str = doc['object']['name']
        query_words: list = name.split()
        for i in query_words:
            query += i+"+"
        return query[:-1]

class CustomDialog(QtWidgets.QDialog):
    def __init__(self, str):
        super().__init__()

        self.setWindowTitle("Warning")

        QBtn = QtWidgets.QDialogButtonBox.Ok

        self.buttonBox = QtWidgets.QDialogButtonBox(QBtn)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        self.layout = QtWidgets.QVBoxLayout()
        message = QtWidgets.QLabel(str)
        self.layout.addWidget(message)
        self.layout.addWidget(self.buttonBox)
        self.setLayout(self.layout)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
